1. grep行提取，cut列提取；

cut [选项] 文件名
-f 列号：提取第几列（从1开始）
cut -f 列号，列号 （多个列号用逗号隔开；这个方法默认的文件以TAB制表符）
cut -f 列号，列号 -d "指定的分隔符" （比如图中，以：为分隔符；列出第1，和第3列的内容）
-d 分隔符：按照指定分隔符分割列 默认为tab

grep "bin/bash" /etc/passwd | grep -v "root" | cut -f 1 -d ":" 提取非root登录用户用户名；

df -h 以人性化显示磁盘使用情况，能显示大小的基本都支持人性化显示
注意：cut只能以指定的字符进行分割，所以处理空格作为分隔符时比较吃力

2. awk 取出某行(比cut更强大更复杂)
awk 'BEGIN{print "test"}{print $2 "\t" $4}END{print "test"}' student.txt  打印出第二列与第四列

grep "bin/bash" /etc/passwd | awk 'BEGIN{FS=":"}{print $1}'　　　打印出用户名字

BEGIN：在读取数据，放入指定变量之前，就先执行BEGIN后面{}里的内容。
END：所有动作执行完后，只要到了结尾，就执行END后面{}里的内容。

FS内置变量
定义awk的分隔符，awk默认的分隔符既可以是空格，也可以是tab。
awk 'BEGIN{FS=":"}'
#将awk的分隔符定义为“:”

关系运算符
都是利用位置参数变量来传递值的。

3. sed 数据替换
行数据操作
sed -n '2p' test.txt #-n只显示操作的当前行，如果不加就是输出全部内容。动作'2p'是打印第二行。

sed命令
主要用来将数据进行选取、替换、删除、新增的命令
sed [选项] '[动作]' 文件名
选项：
-n：一般sed命令会把所有数据都输出到屏幕，如果加入此选项，则只会把经过sed命令处理的行输出到屏幕
-e：允许对输入数据应用多条sed命令编辑
-i：用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出，注意使用-i时不要出现误操作
动作：
a ：追加，在当前行后添加一行或多行
c ：行替换，用c后面的字符串替换原数据行，替换整行，注意与s的区别
i ：插入，在当前行前插入一行或多行
d ：删除，删除指定的行
p ：打印，输出指定的行
s ：字串替换，用一个字符串替换另外一个字符串。格式为“行范围s/旧字串/新字串”
sed -n '2p' student.txt 查看文件的第二行，如果没有-n将输出全部内容
sed '2,4d' student.txt 表示删除【第2-4行】，但是不改变文件本身
sed '2a piaoliangdecxiaoguniang' student.txt 在第2行之后添加字符串，但是不改变字符串本身
sed '4c xxwmpg' student.txt 将第二行的整行替换为xxwmpg
sed '6s/70/100/g' student.txt 将第6行的所有70全部替换为100，如果不指定行的话会替换所有的指定字符串
-e ; 负责隔开进行多个动作
sed -e 's/fengj//g';s/cang//g' student.txt 同时把fengj和cang替换为空

４．　sort
排序命令sort格式及选项
#sort /etc/passwd   ##按照字母顺序a-z排列文件内容
#sort -r /etc/passwd   ##反向排序，即按z-a顺序排列文件内容
#sort -n -t ":" -k 3,3 /etc/passwd   ##以数值型进行排序，指定分隔符为“:”并只取第三字段的内容
